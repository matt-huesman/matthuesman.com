var ve=Object.defineProperty;var he=(e,t,n)=>t in e?ve(e,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):e[t]=n;var Ee=(e,t)=>()=>(t||e((t={exports:{}}).exports,t),t.exports);var q=(e,t,n)=>he(e,typeof t!="symbol"?t+"":t,n);var at=Ee((st,j)=>{var r=typeof r<"u"?r:{},ae=typeof window=="object",M=typeof WorkerGlobalScope<"u",te,D=typeof process=="object"&&((te=process.versions)==null?void 0:te.node)&&process.type!="renderer",oe=!ae&&!D&&!M,Y=(e,t)=>{throw t},re,U=typeof document<"u"?(re=document.currentScript)==null?void 0:re.src:void 0;typeof __filename<"u"?U=__filename:M&&(U=self.location.href);var P="";function be(e){return r.locateFile?r.locateFile(e,P):P+e}var x,L,ne,ie;if(D){if(!(typeof process=="object"&&((ne=process.versions)==null?void 0:ne.node)&&process.type!="renderer"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");var J=process.versions.node,g=J.split(".").slice(0,3);if(g=g[0]*1e4+g[1]*100+g[2].split("-")[0]*1,g<16e4)throw new Error("This emscripten-generated code requires node v16.0.0 (detected v"+J+")");var K=require("fs");P=__dirname+"/",L=t=>{t=h(t)?new URL(t):t;var n=K.readFileSync(t);return i(Buffer.isBuffer(n)),n},x=async(t,n=!0)=>{t=h(t)?new URL(t):t;var o=K.readFileSync(t,n?void 0:"utf8");return i(n?Buffer.isBuffer(o):typeof o=="string"),o},process.argv.length>1&&process.argv[1].replace(/\\/g,"/"),process.argv.slice(2),typeof j<"u"&&(j.exports=r),Y=(t,n)=>{throw process.exitCode=t,n}}else if(oe){if(typeof process=="object"&&((ie=process.versions)==null?void 0:ie.node)&&process.type!="renderer"||typeof window=="object"||typeof WorkerGlobalScope<"u")throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)")}else if(ae||M){try{P=new URL(".",U).href}catch{}if(!(typeof window=="object"||typeof WorkerGlobalScope<"u"))throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");M&&(L=e=>{var t=new XMLHttpRequest;return t.open("GET",e,!1),t.responseType="arraybuffer",t.send(null),new Uint8Array(t.response)}),x=async e=>{if(h(e))return new Promise((n,o)=>{var a=new XMLHttpRequest;a.open("GET",e,!0),a.responseType="arraybuffer",a.onload=()=>{if(a.status==200||a.status==0&&a.response){n(a.response);return}o(a.status)},a.onerror=o,a.send(null)});var t=await fetch(e,{credentials:"same-origin"});if(t.ok)return t.arrayBuffer();throw new Error(t.status+" : "+t.url)}}else throw new Error("environment detection error");var v=console.log.bind(console),l=console.error.bind(console);i(!oe,"shell environment detected but not enabled at build time.  Add `shell` to `-sENVIRONMENT` to enable.");var w;typeof WebAssembly!="object"&&l("no native wasm support detected");var I=!1,$;function i(e,t){e||S("Assertion failed"+(t?": "+t:""))}var h=e=>e.startsWith("file://");function we(){var e=V();i((e&3)==0),e==0&&(e+=4),m[e>>2]=34821223,m[e+4>>2]=2310721022,m[0]=1668509029}function R(){if(!I){var e=V();e==0&&(e+=4);var t=m[e>>2],n=m[e+4>>2];(t!=34821223||n!=2310721022)&&S(`Stack overflow! Stack cookie has been overwritten at ${C(e)}, expected hex dwords 0x89BACDFE and 0x2135467, but received ${C(n)} ${C(t)}`),m[0]!=1668509029&&S("Runtime error: The application has corrupted its heap memory area (address zero)!")}}(()=>{var e=new Int16Array(1),t=new Int8Array(e.buffer);if(e[0]=25459,t[0]!==115||t[1]!==99)throw"Runtime error: expected the system to be little-endian! (Run with -sSUPPORT_BIG_ENDIAN to bypass)"})();function O(e){Object.getOwnPropertyDescriptor(r,e)||Object.defineProperty(r,e,{configurable:!0,set(){S(`Attempt to set \`Module.${e}\` after it has already been processed.  This can happen, for example, when code is injected via '--post-js' rather than '--pre-js'`)}})}function A(e){return()=>i(!1,`call to '${e}' via reference taken before Wasm module initialization`)}function Te(e){Object.getOwnPropertyDescriptor(r,e)&&S(`\`Module.${e}\` was supplied but \`${e}\` not included in INCOMING_MODULE_JS_API`)}function se(e){return e==="FS_createPath"||e==="FS_createDataFile"||e==="FS_createPreloadedFile"||e==="FS_unlink"||e==="addRunDependency"||e==="FS_createLazyFile"||e==="FS_createDevice"||e==="removeRunDependency"}function le(e,t){typeof globalThis<"u"&&!Object.getOwnPropertyDescriptor(globalThis,e)&&Object.defineProperty(globalThis,e,{configurable:!0,get(){t()}})}function ce(e,t){le(e,()=>{f(`\`${e}\` is not longer defined by emscripten. ${t}`)})}ce("buffer","Please use HEAP8.buffer or wasmMemory.buffer");ce("asm","Please use wasmExports instead");function Ie(e){le(e,()=>{var t=`\`${e}\` is a library symbol and not included by default; add it to your library.js __deps or to DEFAULT_LIBRARY_FUNCS_TO_INCLUDE on the command line`,n=e;n.startsWith("_")||(n="$"+e),t+=` (e.g. -sDEFAULT_LIBRARY_FUNCS_TO_INCLUDE='${n}')`,se(e)&&(t+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),f(t)}),de(e)}function de(e){Object.getOwnPropertyDescriptor(r,e)||Object.defineProperty(r,e,{configurable:!0,get(){var t=`'${e}' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the Emscripten FAQ)`;se(e)&&(t+=". Alternatively, forcing filesystem support (-sFORCE_FILESYSTEM) can export this for you"),S(t)}})}var B,ue,m,W=!1;function Re(){var e=B.buffer;ue=new Uint8Array(e),m=new Uint32Array(e),new BigInt64Array(e),new BigUint64Array(e)}i(typeof Int32Array<"u"&&typeof Float64Array<"u"&&Int32Array.prototype.subarray!=null&&Int32Array.prototype.set!=null,"JS engine does not provide full typed array support");function Ae(){if(r.preRun)for(typeof r.preRun=="function"&&(r.preRun=[r.preRun]);r.preRun.length;)He(r.preRun.shift());O("preRun"),me(N)}function ke(){i(!W),W=!0,R(),y.__wasm_call_ctors()}function Ce(){R()}function Me(){if(R(),r.postRun)for(typeof r.postRun=="function"&&(r.postRun=[r.postRun]);r.postRun.length;)Ge(r.postRun.shift());O("postRun"),me(pe)}var _=0,E=null,b={},F=null;function Pe(e){var t;_++,(t=r.monitorRunDependencies)==null||t.call(r,_),i(!b[e]),b[e]=1,F===null&&typeof setInterval<"u"&&(F=setInterval(()=>{if(I){clearInterval(F),F=null;return}var n=!1;for(var o in b)n||(n=!0,l("still waiting on run dependencies:")),l(`dependency: ${o}`);n&&l("(end of list)")},1e4))}function Le(e){var n;if(_--,(n=r.monitorRunDependencies)==null||n.call(r,_),i(b[e]),delete b[e],_==0&&(F!==null&&(clearInterval(F),F=null),E)){var t=E;E=null,t()}}function S(e){var n;(n=r.onAbort)==null||n.call(r,e),e="Aborted("+e+")",l(e),I=!0;var t=new WebAssembly.RuntimeError(e);throw t}var u={error(){S("Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with -sFORCE_FILESYSTEM")},init(){u.error()},createDataFile(){u.error()},createPreloadedFile(){u.error()},createLazyFile(){u.error()},open(){u.error()},mkdev(){u.error()},registerDevice(){u.error()},analyzePath(){u.error()},ErrnoError(){u.error()}};function X(e,t){return(...n)=>{i(W,`native function \`${e}\` called before runtime initialization`);var o=y[e];return i(o,`exported native function \`${e}\` not found`),i(n.length<=t,`native function \`${e}\` called with ${n.length} args but expects ${t}`),o(...n)}}var T;function Ne(){return be("main.wasm")}function De(e){if(e==T&&w)return new Uint8Array(w);if(L)return L(e);throw"both async and sync fetching of the wasm failed"}async function Oe(e){if(!w)try{var t=await x(e);return new Uint8Array(t)}catch{}return De(e)}async function Ue(e,t){try{var n=await Oe(e),o=await WebAssembly.instantiate(n,t);return o}catch(a){l(`failed to asynchronously prepare wasm: ${a}`),h(T)&&l(`warning: Loading from a file URI (${T}) is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing`),S(a)}}async function xe(e,t,n){if(!e&&typeof WebAssembly.instantiateStreaming=="function"&&!h(t)&&!D)try{var o=fetch(t,{credentials:"same-origin"}),a=await WebAssembly.instantiateStreaming(o,n);return a}catch(c){l(`wasm streaming compile failed: ${c}`),l("falling back to ArrayBuffer instantiation")}return Ue(t,n)}function Be(){return{env:Q,wasi_snapshot_preview1:Q}}async function We(){function e(s,p){return y=s.exports,B=y.memory,i(B,"memory not found in wasm exports"),Re(),et(y),Le("wasm-instantiate"),y}Pe("wasm-instantiate");var t=r;function n(s){return i(r===t,"the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?"),t=null,e(s.instance)}var o=Be();if(r.instantiateWasm)return new Promise((s,p)=>{try{r.instantiateWasm(o,(d,k)=>{s(e(d,k))})}catch(d){l(`Module.instantiateWasm callback failed with error: ${d}`),p(d)}});T??(T=Ne());var a=await xe(w,T,o),c=n(a);return c}class fe{constructor(t){q(this,"name","ExitStatus");this.message=`Program terminated with exit(${t})`,this.status=t}}var me=e=>{for(;e.length>0;)e.shift()(r)},pe=[],Ge=e=>pe.push(e),N=[],He=e=>N.push(e),_e=!0,C=e=>(i(typeof e=="number"),e>>>=0,"0x"+e.toString(16).padStart(8,"0")),f=e=>{f.shown||(f.shown={}),f.shown[e]||(f.shown[e]=1,D&&(e="warning: "+e),l(e))},G=[null,[],[]],Z=typeof TextDecoder<"u"?new TextDecoder:void 0,ze=(e,t=0,n=NaN)=>{for(var o=t+n,a=t;e[a]&&!(a>=o);)++a;if(a-t>16&&e.buffer&&Z)return Z.decode(e.subarray(t,a));for(var c="";t<a;){var s=e[t++];if(!(s&128)){c+=String.fromCharCode(s);continue}var p=e[t++]&63;if((s&224)==192){c+=String.fromCharCode((s&31)<<6|p);continue}var d=e[t++]&63;if((s&240)==224?s=(s&15)<<12|p<<6|d:((s&248)!=240&&f("Invalid UTF-8 leading byte "+C(s)+" encountered when deserializing a UTF-8 string in wasm memory to a JS string!"),s=(s&7)<<18|p<<12|d<<6|e[t++]&63),s<65536)c+=String.fromCharCode(s);else{var k=s-65536;c+=String.fromCharCode(55296|k>>10,56320|k&1023)}}return c},H=(e,t)=>{var n=G[e];i(n),t===0||t===10?((e===1?v:l)(ze(n)),n.length=0):n.push(t)},je=()=>{Fe(0),G[1].length&&H(1,10),G[2].length&&H(2,10)},Ye=(e,t,n,o)=>{for(var a=0,c=0;c<n;c++){var s=m[t>>2],p=m[t+4>>2];t+=8;for(var d=0;d<p;d++)H(e,ue[s+d]);a+=p}return m[o>>2]=a,0},$e=0,Ve=()=>_e||$e>0,qe=e=>{var t;$=e,Ve()||((t=r.onExit)==null||t.call(r,e),I=!0),Y(e,new fe(e))},Je=(e,t)=>{$=e,nt(),qe(e)},Ke=e=>{if(e instanceof fe||e=="unwind")return $;R(),e instanceof WebAssembly.RuntimeError&&ge()<=0&&l("Stack overflow detected.  You can try increasing -sSTACK_SIZE (currently set to 65536)"),Y(1,e)};r.noExitRuntime&&(_e=r.noExitRuntime),r.print&&(v=r.print),r.printErr&&(l=r.printErr),r.wasmBinary&&(w=r.wasmBinary),r.FS_createDataFile=u.createDataFile,r.FS_createPreloadedFile=u.createPreloadedFile,Qe(),r.arguments&&r.arguments,r.thisProgram&&r.thisProgram,i(typeof r.memoryInitializerPrefixURL>"u","Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead"),i(typeof r.pthreadMainPrefixURL>"u","Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead"),i(typeof r.cdInitializerPrefixURL>"u","Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead"),i(typeof r.filePackagePrefixURL>"u","Module.filePackagePrefixURL option was removed, use Module.locateFile instead"),i(typeof r.read>"u","Module.read option was removed"),i(typeof r.readAsync>"u","Module.readAsync option was removed (modify readAsync in JS)"),i(typeof r.readBinary>"u","Module.readBinary option was removed (modify readBinary in JS)"),i(typeof r.setWindowTitle>"u","Module.setWindowTitle option was removed (modify emscripten_set_window_title in JS)"),i(typeof r.TOTAL_MEMORY>"u","Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY"),i(typeof r.ENVIRONMENT>"u","Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -sENVIRONMENT=web or -sENVIRONMENT=node)"),i(typeof r.STACK_SIZE>"u","STACK_SIZE can no longer be set at runtime.  Use -sSTACK_SIZE at link time"),i(typeof r.wasmMemory>"u","Use of `wasmMemory` detected.  Use -sIMPORTED_MEMORY to define wasmMemory externally"),i(typeof r.INITIAL_MEMORY>"u","Detected runtime INITIAL_MEMORY setting.  Use -sIMPORTED_MEMORY to define wasmMemory dynamically");var Xe=["writeI53ToI64","writeI53ToI64Clamped","writeI53ToI64Signaling","writeI53ToU64Clamped","writeI53ToU64Signaling","readI53FromI64","readI53FromU64","convertI32PairToI53","convertI32PairToI53Checked","convertU32PairToI53","bigintToI53Checked","stackAlloc","getTempRet0","setTempRet0","zeroMemory","getHeapMax","abortOnCannotGrowMemory","growMemory","withStackSave","strError","inetPton4","inetNtop4","inetPton6","inetNtop6","readSockaddr","writeSockaddr","emscriptenLog","readEmAsmArgs","jstoi_q","getExecutableName","autoResumeAudioContext","getDynCaller","dynCall","runtimeKeepalivePush","runtimeKeepalivePop","callUserCallback","maybeExit","asmjsMangle","asyncLoad","alignMemory","mmapAlloc","HandleAllocator","getNativeTypeSize","getUniqueRunDependency","addOnInit","addOnPostCtor","addOnPreMain","addOnExit","STACK_SIZE","STACK_ALIGN","POINTER_SIZE","ASSERTIONS","ccall","cwrap","uleb128Encode","sigToWasmTypes","generateFuncType","convertJsFunctionToWasm","getEmptyTableSlot","updateTableMap","getFunctionAddress","addFunction","removeFunction","reallyNegative","unSign","strLen","reSign","formatString","stringToUTF8Array","stringToUTF8","lengthBytesUTF8","intArrayFromString","intArrayToString","AsciiToString","stringToAscii","UTF16ToString","stringToUTF16","lengthBytesUTF16","UTF32ToString","stringToUTF32","lengthBytesUTF32","stringToNewUTF8","stringToUTF8OnStack","writeArrayToMemory","registerKeyEventCallback","maybeCStringToJsString","findEventTarget","getBoundingClientRect","fillMouseEventData","registerMouseEventCallback","registerWheelEventCallback","registerUiEventCallback","registerFocusEventCallback","fillDeviceOrientationEventData","registerDeviceOrientationEventCallback","fillDeviceMotionEventData","registerDeviceMotionEventCallback","screenOrientation","fillOrientationChangeEventData","registerOrientationChangeEventCallback","fillFullscreenChangeEventData","registerFullscreenChangeEventCallback","JSEvents_requestFullscreen","JSEvents_resizeCanvasForFullscreen","registerRestoreOldStyle","hideEverythingExceptGivenElement","restoreHiddenElements","setLetterbox","softFullscreenResizeWebGLRenderTarget","doRequestFullscreen","fillPointerlockChangeEventData","registerPointerlockChangeEventCallback","registerPointerlockErrorEventCallback","requestPointerLock","fillVisibilityChangeEventData","registerVisibilityChangeEventCallback","registerTouchEventCallback","fillGamepadEventData","registerGamepadEventCallback","registerBeforeUnloadEventCallback","fillBatteryEventData","battery","registerBatteryEventCallback","setCanvasElementSize","getCanvasElementSize","jsStackTrace","getCallstack","convertPCtoSourceLocation","getEnvStrings","checkWasiClock","wasiRightsToMuslOFlags","wasiOFlagsToMuslOFlags","initRandomFill","randomFill","safeSetTimeout","setImmediateWrapped","safeRequestAnimationFrame","clearImmediateWrapped","registerPostMainLoop","registerPreMainLoop","getPromise","makePromise","idsToPromises","makePromiseCallback","ExceptionInfo","findMatchingCatch","Browser_asyncPrepareDataCounter","isLeapYear","ydayFromDate","arraySum","addDays","getSocketFromFD","getSocketAddress","FS_createPreloadedFile","FS_modeStringToFlags","FS_getMode","FS_stdin_getChar","FS_mkdirTree","_setNetworkCallback","heapObjectForWebGLType","toTypedArrayIndex","webgl_enable_ANGLE_instanced_arrays","webgl_enable_OES_vertex_array_object","webgl_enable_WEBGL_draw_buffers","webgl_enable_WEBGL_multi_draw","webgl_enable_EXT_polygon_offset_clamp","webgl_enable_EXT_clip_control","webgl_enable_WEBGL_polygon_mode","emscriptenWebGLGet","computeUnpackAlignedImageSize","colorChannelsInGlTextureFormat","emscriptenWebGLGetTexPixelData","emscriptenWebGLGetUniform","webglGetUniformLocation","webglPrepareUniformLocationsBeforeFirstUse","webglGetLeftBracePos","emscriptenWebGLGetVertexAttrib","__glGetActiveAttribOrUniform","writeGLArray","registerWebGlEventCallback","runAndAbortIfError","ALLOC_NORMAL","ALLOC_STACK","allocate","writeStringToMemory","writeAsciiToMemory","demangle","stackTrace"];Xe.forEach(Ie);var Ze=["run","addRunDependency","removeRunDependency","out","err","callMain","abort","wasmMemory","wasmExports","HEAPF32","HEAPF64","HEAP8","HEAPU8","HEAP16","HEAPU16","HEAP32","HEAPU32","HEAP64","HEAPU64","writeStackCookie","checkStackCookie","INT53_MAX","INT53_MIN","stackSave","stackRestore","ptrToString","exitJS","ENV","ERRNO_CODES","DNS","Protocols","Sockets","timers","warnOnce","readEmAsmArgsArray","handleException","keepRuntimeAlive","wasmTable","noExitRuntime","addOnPreRun","addOnPostRun","freeTableIndexes","functionsInTableMap","setValue","getValue","PATH","PATH_FS","UTF8Decoder","UTF8ArrayToString","UTF8ToString","UTF16Decoder","JSEvents","specialHTMLTargets","findCanvasEventTarget","currentFullscreenStrategy","restoreOldWindowedStyle","UNWIND_CACHE","ExitStatus","flush_NO_FILESYSTEM","emSetImmediate","emClearImmediate_deps","emClearImmediate","promiseMap","uncaughtExceptionCount","exceptionLast","exceptionCaught","Browser","requestFullscreen","requestFullScreen","setCanvasSize","getUserMedia","createContext","getPreloadedImageData__data","wget","MONTH_DAYS_REGULAR","MONTH_DAYS_LEAP","MONTH_DAYS_REGULAR_CUMULATIVE","MONTH_DAYS_LEAP_CUMULATIVE","SYSCALLS","preloadPlugins","FS_stdin_getChar_buffer","FS_unlink","FS_createPath","FS_createDevice","FS_readFile","FS","FS_root","FS_mounts","FS_devices","FS_streams","FS_nextInode","FS_nameTable","FS_currentPath","FS_initialized","FS_ignorePermissions","FS_filesystems","FS_syncFSRequests","FS_readFiles","FS_lookupPath","FS_getPath","FS_hashName","FS_hashAddNode","FS_hashRemoveNode","FS_lookupNode","FS_createNode","FS_destroyNode","FS_isRoot","FS_isMountpoint","FS_isFile","FS_isDir","FS_isLink","FS_isChrdev","FS_isBlkdev","FS_isFIFO","FS_isSocket","FS_flagsToPermissionString","FS_nodePermissions","FS_mayLookup","FS_mayCreate","FS_mayDelete","FS_mayOpen","FS_checkOpExists","FS_nextfd","FS_getStreamChecked","FS_getStream","FS_createStream","FS_closeStream","FS_dupStream","FS_doSetAttr","FS_chrdev_stream_ops","FS_major","FS_minor","FS_makedev","FS_registerDevice","FS_getDevice","FS_getMounts","FS_syncfs","FS_mount","FS_unmount","FS_lookup","FS_mknod","FS_statfs","FS_statfsStream","FS_statfsNode","FS_create","FS_mkdir","FS_mkdev","FS_symlink","FS_rename","FS_rmdir","FS_readdir","FS_readlink","FS_stat","FS_fstat","FS_lstat","FS_doChmod","FS_chmod","FS_lchmod","FS_fchmod","FS_doChown","FS_chown","FS_lchown","FS_fchown","FS_doTruncate","FS_truncate","FS_ftruncate","FS_utime","FS_open","FS_close","FS_isClosed","FS_llseek","FS_read","FS_write","FS_mmap","FS_msync","FS_ioctl","FS_writeFile","FS_cwd","FS_chdir","FS_createDefaultDirectories","FS_createDefaultDevices","FS_createSpecialDirectories","FS_createStandardStreams","FS_staticInit","FS_init","FS_quit","FS_findObject","FS_analyzePath","FS_createFile","FS_createDataFile","FS_forceLoadFile","FS_createLazyFile","FS_absolutePath","FS_createFolder","FS_createLink","FS_joinPath","FS_mmapAlloc","FS_standardizePath","MEMFS","TTY","PIPEFS","SOCKFS","tempFixedLengthArray","miniTempWebGLFloatBuffers","miniTempWebGLIntBuffers","GL","AL","GLUT","EGL","GLEW","IDBStore","SDL","SDL_gfx","allocateUTF8","allocateUTF8OnStack","print","printErr","jstoi_s"];Ze.forEach(de);function Qe(){Te("fetchSettings")}var Se=r._main=A("_main"),Fe=A("_fflush"),ye=A("_emscripten_stack_init"),V=A("_emscripten_stack_get_end"),ge=A("_emscripten_stack_get_current");function et(e){r._main=Se=X("main",2),Fe=X("fflush",1),ye=e.emscripten_stack_init,e.emscripten_stack_get_free,e.emscripten_stack_get_base,V=e.emscripten_stack_get_end,e._emscripten_stack_restore,e._emscripten_stack_alloc,ge=e.emscripten_stack_get_current}var Q={fd_write:Ye},y;We();var ee;function tt(){i(_==0,'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])'),i(typeof N>"u"||N.length==0,"cannot call main when preRun functions remain to be called");var e=Se,t=0,n=0;try{var o=e(t,n);return Je(o,!0),o}catch(a){return Ke(a)}}function rt(){ye(),we()}function z(){if(_>0){E=z;return}if(rt(),Ae(),_>0){E=z;return}function e(){var n;if(i(!ee),ee=!0,r.calledRun=!0,!I){ke(),Ce(),(n=r.onRuntimeInitialized)==null||n.call(r),O("onRuntimeInitialized");var t=r.noInitialRun||!1;t||tt(),Me()}}r.setStatus?(r.setStatus("Running..."),setTimeout(()=>{setTimeout(()=>r.setStatus(""),1),e()},1)):e(),R()}function nt(){var e=v,t=l,n=!1;v=l=o=>{n=!0};try{je()}catch{}v=e,l=t,n&&(f("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the Emscripten FAQ), or make sure to emit a newline when you printf etc."),f("(this may also be due to not including full filesystem support - try building with -sFORCE_FILESYSTEM)"))}function it(){if(r.preInit)for(typeof r.preInit=="function"&&(r.preInit=[r.preInit]);r.preInit.length>0;)r.preInit.shift()();O("preInit")}it();z()});export default at();
